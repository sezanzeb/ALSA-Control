#!/usr/bin/python3
# -*- coding: utf-8 -*-
# ALSA-Control - ALSA configuration interface
# Copyright (C) 2020 sezanzeb <proxima@hip70890b.de>
#
# This file is part of ALSA-Control.
#
# ALSA-Control is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ALSA-Control is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ALSA-Control.  If not, see <https://www.gnu.org/licenses/>.


"""User Interface."""


import os

from dbus.mainloop.glib import DBusGMainLoop
import alsaaudio
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('GLib', '2.0')
from gi.repository import Gtk, GLib

from alsacontrol.alsa import get_volume, set_volume, toggle_mute, is_muted, \
    get_cards, OUTPUT_MUTE, INPUT_MUTE
from alsacontrol.bindings import Bindings, get_volume_string, \
    get_volume_icon, get_error_advice, select_input_pcm, select_output_pcm, \
    get_current_output, eavesdrop_volume_notifications
from alsacontrol.data import get_data_path
from alsacontrol.asoundrc import setup_asoundrc


class HandlerDisabled:
    """Safely modify a widget without causing handlers to be called.

    Use in a with statement.
    """
    def __init__(self, widget, event, handler):
        self.widget = widget
        self.handler = handler
        self.event = event

    def __enter__(self):
        try:
            self.widget.disconnect_by_func(
                self.handler
            )
            self.was_connected = True
        except TypeError:
            self.was_connected = False

    def __exit__(self, *_):
        if self.was_connected:
            self.widget.connect(
                self.event, self.handler
            )


class ALSAControlWindow:
    """User Interface."""
    def __init__(self):
        self.bindings = Bindings()

        gladefile = os.path.join(get_data_path(), 'alsacontrol.glade')
        builder = Gtk.Builder()
        builder.add_from_file(gladefile)
        builder.connect_signals(self)
        self.builder = builder

        self.card_selection = self.builder.get_object(
            'output_card_selection'
        )

        self.initialize_volume_slider()
        self.populate_output_cards_dropdown()
        self.populate_input_pcms()
        self.select_current_output()

        self.speaker_test_process = None

        window = builder.get_object('alsacontrol_window')
        window.show()

        speaker_test_error = builder.get_object('speaker_test_error')
        speaker_test_error.hide()

        eavesdrop_volume_notifications(
            DBusGMainLoop(),
            self.initialize_volume_slider
        )

        GLib.timeout_add(500, self.refresh_cards)

    """General Stuff"""

    def on_close(self, *_):
        """Safely close the application."""
        self.bindings.stop_speaker_test()
        Gtk.main_quit()

    def refresh_cards(self):
        """Refresh the list of cards for both input and output."""
        if self.bindings.log_new_pcms():
            self.populate_output_cards_dropdown()
            self.populate_input_pcms()
        return True

    def initialize_volume_slider(self):
        """Reflect the current volume and mute state on each tab."""
        output_slider = self.builder.get_object('output_volume_slider_scale')
        output_volume = get_volume(alsaaudio.PCM_PLAYBACK, nonlinear=True)
        output_slider.set_value(output_volume)
        output_volume = output_slider.get_value()
        output_muted = is_muted(OUTPUT_MUTE)
        self.refresh_icon_state('output', output_volume, output_muted)

        input_slider = self.builder.get_object('input_volume_slider_scale')
        input_volume = get_volume(alsaaudio.PCM_CAPTURE, nonlinear=True)
        input_slider.set_value(input_volume)
        input_volume = input_slider.get_value()
        input_muted = is_muted(INPUT_MUTE)
        self.refresh_icon_state('input', input_volume, input_muted)

    def on_switch_page(self, notebook, page, page_num):
        page_name = page.get_name()
        input_cards_scrolled_window = self.builder.get_object(
            'input_cards_scrolled_window'
        )
        if page_name == 'input_card_tab':
            input_cards_scrolled_window.show()
        else:
            # shrink the output tab height to the contents
            input_cards_scrolled_window.hide()
            self.shrink_height()

    def shrink_height(self):
        """Reduce the windows height as much as possible."""
        window = self.builder.get_object('alsacontrol_window')
        window.resize(window.get_size()[0], 1)

    def refresh_icon_state(self, tab, volume, muted):
        """Refresh icons and labels depending on mute and volume state.

        Parameters
        ----------
        tab : string
            one of 'output' or 'input'
        volume : float
            Current volume. Between 0 and 1
        muted : bool
            If audio can't currently play. True or False
        """
        volume_string = get_volume_string(volume, muted)
        volume_label = self.builder.get_object(f'{tab}_volume_current')
        volume_label.set_label(volume_string)

        volume_icon_name = get_volume_icon(volume, muted)
        volume_image = self.builder.get_object(f'{tab}_volume_icon')
        volume_image.set_from_icon_name(volume_icon_name, Gtk.IconSize.BUTTON)

    """Output"""

    def dropdown_handlers_disabled(self):
        """Safely modify dropdown contents."""
        return HandlerDisabled(
            self.card_selection, 'changed', self.on_output_card_selected
        )

    def select_current_output(self):
        """Select the configured values for both dropdowns."""
        with self.dropdown_handlers_disabled():
            d, card = get_current_output()
            if card is not None:
                card_selection = self.card_selection
                if card_selection.get_active() != d:
                    card_selection.set_active(d)

    def populate_output_cards_dropdown(self):
        """Get all output options and fill them into the dropdowns."""
        with self.dropdown_handlers_disabled():
            cards = get_cards(alsaaudio.PCM_PLAYBACK)
            self.card_selection.remove_all()
            for card in cards:
                self.card_selection.append(card, card)
            # since all cards have been removed, restore the selection
            index, card = get_current_output()
            if card is not None:
                self.card_selection.set_active(index)

    def on_output_card_selected(self, card_dropdown):
        """Handler for when a card is selected or the list just changed."""
        card_name = card_dropdown.get_active_text()
        if card_name is None:
            return
        if get_current_output()[1] == card_name:
            # already at the correct selection
            return
        select_output_pcm(card_name)

    def on_output_volume_change(self, gtk_range):
        """Handler when the output volume slider was dragged."""
        muted = is_muted()
        volume = gtk_range.get_value()
        self.refresh_icon_state('output', volume, muted)
        set_volume(volume, alsaaudio.PCM_PLAYBACK, nonlinear=True)

    def on_mute_output_clicked(self, _):
        """Handler for when the mute button was clicked."""
        muted = toggle_mute()
        volume = get_volume(alsaaudio.PCM_PLAYBACK, nonlinear=True)
        self.refresh_icon_state('output', volume, muted)

    def on_test_speaker_clicked(self, _):
        """Handler when the speaker test button was pressed."""
        self.bindings.toggle_speaker_test()
        # after some delay check if it is still running,
        # to show potential errors
        GLib.timeout_add(100, self.check_speaker_test)

    def check_speaker_test(self):
        """Adjust the GUI to the speaker test state."""
        state, error = self.bindings.check_speaker_test()

        builder = self.builder
        button = builder.get_object('output_test')
        speaker_test_error = builder.get_object('speaker_test_error')
        speaker_test_error_text = builder.get_object('speaker_test_error_text')

        if error:
            # Show it in an extra label, not a dialog, because I think
            # they are annoying.
            speaker_test_error.show()
            advice = get_error_advice(error)
            if advice is not None:
                speaker_test_error_text.set_label(
                    '{}\n\nHelp:\n{}'.format(error, advice)
                )
            else:
                speaker_test_error_text.set_label(error)
        else:
            self.shrink_height()
            speaker_test_error.hide()

        if state:
            button.set_label('Stop Test')
            return True  # keep the timeout running
        else:
            button.set_label('Test Speaker')
            return False

    """Input"""

    def populate_input_pcms(self):
        """Create the list of intput cards."""
        input_cards_list = self.builder.get_object('input_cards_list')
        cards = get_cards(alsaaudio.PCM_CAPTURE)
        for card in cards:
            level = Gtk.ProgressBar()
            level.set_valign(Gtk.Align.CENTER)

            select_button = Gtk.Button.new_from_icon_name(
                'object-select',
                Gtk.IconSize.BUTTON
            )

            def on_click(_, card_name=card):
                # copy card into card_name when the function is created,
                # otherwise it will always be the last device in cards
                self.select_input_card(card_name)

            select_button.connect('clicked', on_click)

            pcm_name = Gtk.Label(label=card)
            pcm_name.set_xalign(0.0)

            box = Gtk.Box(
                orientation=Gtk.Orientation.HORIZONTAL,
                spacing=10
            )
            box.pack_start(select_button, expand=False, fill=True, padding=0)
            box.pack_start(pcm_name, expand=True, fill=True, padding=0)
            box.pack_start(level, expand=False, fill=False, padding=0)
            box.set_margin_start(10)
            box.set_margin_end(22)

            box.show_all()

            input_cards_list.pack_start(
                box, expand=False, fill=False, padding=10
            )

        input_cards_scrolled_window = self.builder.get_object(
            'input_cards_scrolled_window'
        )
        # set the minimum content height of the ScrolledWindow to the
        # heigt of the list, but at most 300px
        height = min(input_cards_list.get_preferred_height()[0], 400)
        input_cards_scrolled_window.set_min_content_height(height)

    def select_input_card(self, card):
        """Select a card as input source."""
        label = self.builder.get_object('input_card_name')
        label.set_label(card)
        select_input_pcm(card)

    def on_input_volume_change(self, gtk_range):
        """Handler when the input volume slider was dragged."""
        muted = is_muted(INPUT_MUTE)
        volume = gtk_range.get_value()
        self.refresh_icon_state('input', volume, muted)
        set_volume(volume, alsaaudio.PCM_CAPTURE, nonlinear=True)

    def on_mute_input_clicked(self, _):
        """Handler for when the mute button was clicked."""
        muted = toggle_mute(INPUT_MUTE)
        volume = get_volume(alsaaudio.PCM_CAPTURE, nonlinear=True)
        self.refresh_icon_state('input', volume, muted)


if __name__ == '__main__':
    setup_asoundrc()
    ALSAControlWindow()
    mainloop = GLib.MainLoop()
    mainloop.run()
